<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    version="-//W3C//DTD XHTML 1.1//EN" xml:lang="en">
<head>
  <title>Contacts</title>
 <link rel="stylesheet"
      href="chrome://people/content/manager.css"
      type="text/css" />
  <script type="text/javascript;version=1.8"
      src="chrome://people/content/jquery.js"></script>
  <script type="text/javascript;version=1.8"
      src="chrome://people/content/quicksilver.js"></script>
  <script type="text/javascript;version=1.8"
      src="chrome://people/content/search.js"></script>
  <script type="text/javascript;version=1.8"
      src="chrome://people/content/manager.js"></script>
  <script type='text/javascript'
      src='chrome://people/content/jquery.tipsy.js'></script>
  <link rel="stylesheet" href="chrome://people/content/tipsy.css" type="text/css" />
</head>

<script type="text/javascript;version=1.8">

function doServiceConnect(service)
{
  try {
    updateImportProgress(service, "Working...");

    People.connectService(
      service, 
      function(error) {importerComplete(error, service);}, 
      function(val) {updateImportProgress(service, val);}, 
      window);
      
  } catch (e) {
    updateImportProgress(service, e.message);
    displayServices();  
  }
}

function doServiceDisconnect(service)
{
  try {
    People.disconnectService(service);
    People.findCallback( {}, PeopleManager.loadComplete, null);   
  } catch (e) {
    updateImportProgress(service, e.message);
  }
  displayServices();  
}

function doServiceRefresh(service)
{
  try {
    updateImportProgress(service, "Working...");
    People.refreshService(service, function(error) {importerComplete(error, service)}, function(val) {updateImportProgress(service, val);}, window);
  } catch (e) {
    updateImportProgress(service, e.message);
    displayServices();  
  }
}

function updateImportProgress(service, msg)
{
  if (msg == null) {
    document.getElementById('importer' + service + 'progress').innerHTML = "";
  } else {
    document.getElementById('importer' + service + 'progress').innerHTML = msg;
  }
}

function importerComplete(error, service) 
{
  if (error) {
    if (error.progressUI) {
      document.getElementById('importer' + service + 'progress').innerHTML = "";
      document.getElementById('importer' + service + 'progress').appendChild(error.progressUI);
    } else { 
      updateImportProgress(service, error.message);
    }
  } else {
    updateImportProgress(service, null);
    People.findCallback( {}, PeopleManager.loadComplete, null);
  }
  displayServices();  
}

function resetSavedPerms()
{
  People.resetSavedPermissions();
  renderPermissions();
}

function deleteAll()
{
  People.deleteAll();
  People.findCallback( {}, PeopleManager.loadComplete, null);
  displayServices();  
}

function deleteDiscovered()
{
  People.removeDiscoveryData();
  People.findCallback( {}, PeopleManager.loadComplete, null);
}

function exportVCard()
{
  PeopleManager.exportVCard();
}

function setContactDisplayMode(mode)
{
 contactDisplayMode = mode;
 PeopleManager.render();
}

function renderPermissions()
{
  let permissionTable = document.getElementById('permissionsTableBody');
  permissionTable.innerHTML = "";
  let permissions = People.getAllPermissions();
  for each (let perm in permissions) {
    let aDiv = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    let aSite = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    let aFields = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    let aGroups = document.createElementNS("http://www.w3.org/1999/xhtml", "div");

    aDiv.setAttribute("class", "row");
    aSite.setAttribute("class", "site");
    aFields.setAttribute("class", "field");
    aGroups.setAttribute("class", "field");

    aDiv.appendChild(aSite);
    aDiv.appendChild(aFields);
    aDiv.appendChild(aGroups);
    aSite.appendChild(document.createTextNode(perm.url));
    aFields.appendChild(document.createTextNode(perm.fields.split(",").join(", ")));
    aGroups.appendChild(document.createTextNode(perm.groups));

    permissionTable.appendChild(aDiv);
  }
}

$(document).ready(function(){
  selectPane("contact");
  Components.utils.import("resource://people/modules/import.js");
  Components.utils.import("resource://people/modules/people.js");
  PeopleManager.onLoad();
  renderServices();
  displayServices();  
  renderPermissions();
});

function displayServices()
{
  let services = PeopleImporter.getBackends();  
  let connected = People.connectedServices();

  for (var service in services) {
    if (connected[service]) {
      var now = new Date();
      var then = new Date(connected[service].refresh);
    
      if (then.getDate() != now.getDate())
      {
         var dayDelta = (new Date().getTime() - then.getTime() ) / 1000 / 60 / 60 / 24 // hours
         if (dayDelta &lt; 2) str = "yesterday";
         else if (dayDelta &lt; 7) str = Math.floor(dayDelta) + " days ago";
         else if (dayDelta &lt; 14) str = "last week";
         else if (dayDelta &lt; 30) str = Math.floor(dayDelta) + " days ago";
         else str = Math.floor(dayDelta /30)  + " month" + ((dayDelta/30&gt;2)?"s":"") + " ago";
      } else {
          var str;
          var hrs = then.getHours();
          var mins = then.getMinutes();
          
          var hr = Math.floor(Math.floor(hrs) % 12);
          if (hr == 0) hr =12;
          var mins = Math.floor(mins);
          str = "at " + hr + ":" + (mins &lt; 10 ? "0" : "") + Math.floor(mins) + " " + (hrs >= 12 ? "P.M." : "A.M.");
      }
      document.getElementById("importer" + service + "action").value = "Refresh";
      document.getElementById("importer" + service + "progress").innerHTML = "Updated " + str;
      document.getElementById("importer" + service + "progress").style.width = "200px";
      document.getElementById("importer" + service + "disconnect").style.display = 'block';
    } else {
      document.getElementById("importer" + service + "action").value = "Connect";
      document.getElementById("importer" + service + "progress").style.width = "265px";
      // document.getElementById("importer" + service + "progress").innerHTML = "";
      document.getElementById("importer" + service + "disconnect").style.display = 'none';
    }
  }
}

function renderServices()
{
  let services = PeopleImporter.getBackends();  
  let discoverers = PeopleImporter.getDiscoverers();  
  let importers = document.getElementById('importerbadges');
  let discovererDiv = document.getElementById('discoverybadges');
  importers.innerHTML = "";
  let connected = People.connectedServices();
  
  for (let service in services) {
    try {
      let importer = PeopleImporter.getBackend(service);

      let svcDiv = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
      svcDiv.setAttribute("class", "importerbadge");

      let svcImg = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
      svcImg.setAttribute("src", importer.iconURL);
      svcImg.setAttribute("id", service+"-badge");
      svcDiv.appendChild(svcImg);

      let svcLabel = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
      svcLabel.setAttribute("class", "importerlabel");
      svcLabel.appendChild(document.createTextNode(importer.displayName));
      svcDiv.appendChild(svcLabel);

      let svcButton = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
      svcButton.setAttribute("id", "importer" + service + "action");
      svcButton.setAttribute("type", "submit");
      svcButton.setAttribute("class", "importerbutton");
      svcButton.setAttribute("onclick", "doServiceRefresh('" + service + "')");
      svcButton.setAttribute("value", "Connect");
      svcDiv.appendChild(svcButton);

      let svcProgress = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
      svcProgress.setAttribute("class", "importerprogress");
      svcProgress.setAttribute("id", "importer" + service + "progress");
      svcProgress.appendChild(document.createTextNode(""));
      svcDiv.appendChild(svcProgress);

      let disconButton = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
      disconButton.setAttribute("id", "importer" + service + "disconnect");
      disconButton.setAttribute("type", "submit");
      disconButton.setAttribute("class", "importersubbutton");
      disconButton.setAttribute("onclick", "doServiceDisconnect('" + service + "')");
      disconButton.setAttribute("value", "Disconnect");
      svcDiv.appendChild(disconButton);

      importers.appendChild(svcDiv);
    } catch (e) {
      People._log.warn("Error while rendering service " + service + ": " + e);
    }
  }

  let enabledDiscoverers = PeopleImporter.getEnabledDiscoverers();
  for (let d in discoverers) {
    try {
      let discoverer = PeopleImporter.getDiscoverer(d);
      // let enabled = (enabledDiscoverers[d] == true);
      
      let svcDiv = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
      svcDiv.setAttribute("class", "discovererbadge");

      /*
      let svcImg = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
      svcImg.setAttribute("src", discoverer.iconURL);
      svcImg.setAttribute("id", d+"-badge");
      svcDiv.appendChild(svcImg);
      */
      
      let svcLabel = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
      svcLabel.setAttribute("class", "discovererlabel");
      svcLabel.appendChild(document.createTextNode(discoverer.displayName));
      // svcLabel.appendChild(document.createTextNode(enabled ? " Enabled": " Disabled"));
      svcDiv.appendChild(svcLabel);

      let desc = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
      desc.setAttribute("class", "discoverertext");
      desc.appendChild(document.createTextNode(discoverer.description));
      svcDiv.appendChild(desc);

      discovererDiv.appendChild(svcDiv);
    } catch (e) {
      People._log.warn("Error while rendering discoverer " + d + ": " + e);
    }
  }

}

function setsrc(id, u)
{
  document.getElementById(id).src = u;
}
  
var contactDisplayMode = "table";  
var PANES = ["contact", "service", "discoverers", "permission"];
function selectPane(pane) {
  document.getElementById("contacts").style.display= (pane == "contact"?"block":"none");
  document.getElementById("contactdetail").style.display=(pane == "contact"  &amp;&amp; contactDisplayMode == "table"?"block":"none");
  
  for each (var p in PANES) {
    if (p == pane) {
      document.getElementById(p + "pane").style.display="block";
      document.getElementById(p + "paneswitch").setAttribute("class", "controlbutton_selected");
    } else {
      document.getElementById(p + "pane").style.display="none";    
      document.getElementById(p + "paneswitch").setAttribute("class", "controlbutton");
    }
  }
  if(pane == "contact") PeopleManager.reRender();
}

</script>

<body id="body">
<div class="controlbar">

  <div id="contactpaneswitch" class="controlbutton" onclick="selectPane('contact')">
    <img src="images/people.png"/><br/>
    Contacts
  </div>
  <div id="servicepaneswitch" class="controlbutton" onclick="selectPane('service')">
    <img src="images/services.png"/><br/>
    <div class="controlbuttonlabel">Services</div>
  </div>

  <div id="discovererspaneswitch" class="controlbutton" onclick="selectPane('discoverers')">
    <img src="images/services.png"/><br/>
    <div class="controlbuttonlabel">Finders</div>
  </div>

  <div id="permissionpaneswitch" class="controlbutton" onclick="selectPane('permission')">
    <img src="images/lock.png"/><br/>
    Permissions
  </div>

</div>

<div style="display:none" id="contactpane">
  <div class="contactcontrols">
  <div class="searchframe">Search:
    <div class="searchbubble">
     <input type="text" name="search" class="searchbox" id="searchbox" autocomplete="off"/>
    <img align="top" src="chrome://people/content/images/search-textbox.png"/>
    </div>
  </div>

  <div id="contactdisplaymodes">
    <div onclick="setContactDisplayMode('cards')" class="contactdisplaymode"><img src="images/cards.png"/></div>
    <div onclick="setContactDisplayMode('table')" class="contactdisplaymode"><img src="images/table.png"/></div>
  </div>
  </div>
</div>

<div style="display:none" id="servicepane">

<div id="servicesHeader">
  <a target="_blank" href="http://mozillalabs.com/contacts"><img class="contactsLogo" src="images/contactsLogo.png"/></a>
  <p style="color:#505050;font-weight:normal">
  This is a <b>Mozilla Labs Experiment</b>.  It is NOT production-quality code.  It
  may crash, generate incorrect output, or contain security bugs.  Please do not use it
  on Firefox profile you cannot afford to lose.  If you do not know what a Firefox Profile
  is, you may want to read about them <a href="http://support.mozilla.com/en-US/kb/Managing+profiles?bl=n&amp;s=profile&amp;as=q">here</a>;
  they are a good way to experiment with Firefox addons without putting your data at risk.
  </p>
  <p><b>Firefox Contacts</b> reads your contact information from any website or program on your computer, and uses it to enhance your web browsing experience.</p>
  <p>Contacts will try to connect contacts that probably represent the same person by looking at email addresses and full names.</p>
</div>

<div class="controlsubhead">Contact Services</div>
<p>
<div style="float:right">
  <input type="submit" 
    onclick="javascript:window.open('directory.xhtml', '_blank')" value="Find More Services"/></div>
These are services that Firefox can load your contacts from.
</p>

<div id="importerbadges">
</div>

<div class="controlsubhead">Contact Database Management</div>

<p id="contactCount"></p>

<p>
<div style="float:right"><input type="submit" onclick="javascript:deleteAll()" value="Empty Address Book"/></div>
Remove all contacts (you can import them again)
</p>

<p>
<div style="float:right"><input type="submit" onclick="javascript:exportVCard()" value="Export Contacts"/></div>
Export contacts for use in another program
</p>

<p>
<div style="float:right"><input type="submit" onclick="javascript:deleteDiscovered()" value="Delete Found Data"/></div>
Delete saved data that was found about contacts using the Finders.
</p>

</div>

<div style="display:none" id="discovererspane">

<div id="servicesHeader">
  <p><b>Firefox Contacts</b> can use the information in your contact list to access other data 
  about people that is available on the web.  Firefox is not creating a database that other people
  can access - it is just displaying information from the web in your browser.
  </p>
</div>

<div class="controlsubhead">Contact Finder Services</div>
<p>
These are services that Firefox uses to learn more about people you know.
</p>

<div id="discoverybadges">
</div>

</div>

<div style="display:none" id="permissionpane">
<div style="float:right;padding-left:16px"><input type="submit" onclick="javascript:resetSavedPerms()" value="Reset Saved Permissions"/></div>

When web pages request access to your Contacts, you will be asked whether you want
to give them permission.  This table shows which pages you have granted contact access
to.

<div id='permissionsTable'>

  <div class="permissionsTableHead">
    <div class="sitehead">Site</div>
    <div class="fieldhead">Data Fields</div>
    <div class="fieldhead">Groups</div>
  </div>
  
  <div id='permissionsTableBody' class='permissionsTableBody'></div>
</div>

</div>

<!-- vertical-scrolling elements at top-level for proper 100% height sizing -->
<div id="contacts"></div>
<div id="contactdetail"></div>

</body>
</html>
